@* MachineGantt.razor – JS なしで SVG ガントチャート *@
@using Microsoft.AspNetCore.Components.Web

<div class="gantt-wrap">

  <!-- ==== 左：機器ラベル列（固定） ==== -->
  <svg class="label-svg"
       width="@LabelWidth"
       height="@TotalHeight"
       viewBox="0 0 @LabelWidth @TotalHeight">

    @* 行ラベル & 横細線 *@
    @for (int r = 0; r < Machines.Count; r++)
    {
      var yTop = RowH + r * RowH;

      <g>
        <text x="@(LabelWidth - 5)"
              y="@(yTop + RowH / 2)"
              class="label">@Machines[r].Name</text>
      </g>

      <line x1="0" x2="@LabelWidth"
            y1="@yTop" y2="@yTop"
            class="g-thin" />
    }

    @* 上端・下端・右端（太線） *@
    <rect x="0" y="0"
          width="@LabelWidth" height="@TotalHeight"
          class="g-hour" fill="none" />
  </svg>

  <!-- ==== 右：タイムライン ==== -->
  <div class="tl-scroll">
    <svg class="tl-svg"
         width="@TimelineWidth"
         height="@TotalHeight"
         viewBox="0 0 @TimelineWidth @TotalHeight">

      @* --- 時間ヘッダ --- *@
      @for (int h = StartHour; h <= EndHour; h++)
      {
        var cx = ((h - StartHour) * 60 / StepMin + ColPerHour / 2f) * CellW;

        <g>
          <text x="@cx"
                y="@(RowH / 2)"
                text-anchor="middle"
                dominant-baseline="middle"
                class="time">@h</text>
        </g>
      }

      @* --- 機器行：状態バー & future 域 --- *@
      @foreach (var (machine, idx) in Machines.Select((m, i) => (m, i)))
      {
        var yTop = RowH + idx * RowH;

        foreach (var seg in machine.Segments)
        {
          var x = ToCol(seg.Start) * CellW;
          var w = (ToCol(seg.End) - ToCol(seg.Start)) * CellW;

          <rect x="@x" y="@yTop"
                width="@w" height="@RowH"
                class="@seg.StatusCss" />
        }

        var fCol = ToCol(Now);
        if (fCol < Cols)
        {
          <rect x="@(fCol * CellW)"
                y="@yTop"
                width="@((Cols - fCol) * CellW)"
                height="@RowH"
                class="future" />
        }
      }

      @* --- 細グリッド（縦・横） --- *@
      @for (int c = 0; c < Cols; c++)     /* 右外枠は細線を描かない */
      {
        var x = c * CellW;
        <line x1="@x" y1="@RowH"
              x2="@x" y2="@TotalHeight"
              class="g-thin" />
      }
      @for (int r = 1; r <= Machines.Count + 1; r++)
      {
        var y = r * RowH;
        <line x1="0"
              y1="@y"
              x2="@TimelineWidth"
              y2="@y"
              class="g-thin" />
      }

      @* --- 太グリッド（1 時間） --- *@
      @for (int h = 0; h <= EndHour - StartHour; h++)
      {
        var x = h * ColPerHour * CellW;
        <line x1="@x" y1="0" x2="@x" y2="@TotalHeight" class="g-hour" />
      }

      @* --- 外枠（上・下・右） --- *@
      <line x1="0" y1="0" x2="@TimelineWidth" y2="0" class="g-hour" />
      <line x1="0" y1="@TotalHeight" x2="@TimelineWidth" y2="@TotalHeight" class="g-hour" />
      <line x1="@TimelineWidth" y1="0" x2="@TimelineWidth" y2="@TotalHeight" class="g-hour" />
    </svg>
  </div>
</div>

<style>
  /* ===== レイアウト ===== */
  .gantt-wrap {
    display: flex;
    border: 1.5px solid #8c8c8c; /* 外枠 */
  }

  .label-svg {
    position: sticky;
    left: 0;
    background: #ffffff;
    z-index: 1; /* タイムラインより上へ */
    flex: none;
  }

  .tl-scroll {
    overflow-x: auto;
    overflow-y: hidden;
  }

  .tl-svg {
    display: block;
  }

  /* ===== 色・線 ===== */
  .normal {
    fill: #b6e7be;
  }

  .warning {
    fill: #ffe84f;
  }

  .alert {
    fill: #ff3b2f;
  }

  .future {
    fill: #ffffff;
  }

  .g-thin {
    stroke: #8c8c8c;
    stroke-width: 0.5;
  }

  .g-hour {
    stroke: #8c8c8c;
    stroke-width: 1.5;
  }

  .label {
    text-anchor: end;
    dominant-baseline: middle;
    font-size: 12px;
  }

  .time {
    text-anchor: middle;
    dominant-baseline: middle;
    font-size: 12px;
    font-weight: bold;
  }
</style>

@code {
  /* ===== 受け取るパラメータ ===== */
  [Parameter] public int StartHour { get; set; } = 9;
  [Parameter] public int EndHour { get; set; } = 18;
  [Parameter] public int StepMin { get; set; } = 10;
  [Parameter] public TimeSpan Now { get; set; } = DateTime.Now.TimeOfDay;

  [Parameter] public IReadOnlyList<MachineRow> Machines { get; set; } = SampleData();

  /* ===== レイアウト定数 ===== */
  static readonly int CellW = 24;   // 列幅
  static readonly int RowH = 26;   // 行高
  static readonly int LabelWidth = 70;   // ラベル列幅

  int ColPerHour => 60 / StepMin;
  int Cols => (EndHour - StartHour) * ColPerHour;
  int TimelineWidth => Cols * CellW;
  int TotalHeight => RowH * (Machines.Count + 1);

  /* ===== ヘルパ ===== */
  int ToCol(TimeSpan t)
      => (int)((t - TimeSpan.FromHours(StartHour)).TotalMinutes / StepMin);

  /* ===== データモデル ===== */
  public record Segment(TimeSpan Start, TimeSpan End, string StatusCss);
  public record MachineRow(string Name, List<Segment> Segments);

  /* ===== ダミーデータ ===== */
  static List<MachineRow> SampleData()
  {
    TimeSpan T(string s) => TimeSpan.ParseExact(s, @"hh\:mm", null);

    return new()
        {
            new("機器1", new()
            {
                new(T("09:00"), T("12:30"), "normal"),
                new(T("12:30"), T("12:40"), "warning"),
                new(T("12:40"), T("14:30"), "normal"),
                new(T("14:30"), T("15:00"), "alert"),
                new(T("15:00"), T("16:30"), "normal"),
            }),
            new("機器2", new()
            {
                new(T("09:00"), T("11:00"), "normal"),
                new(T("11:00"), T("12:00"), "alert"),
                new(T("12:00"), T("12:30"), "warning"),
                new(T("12:30"), T("16:30"), "normal"),
            }),
            new("機器3", new()),
            new("機器4", new()),
            new("機器5", new()),
        };
  }
}
