@* MachineGantt.razor – JS なしで SVG ガントチャート *@
@using Microsoft.AspNetCore.Components.Web

<svg width="@Width" height="@Height" viewBox="0 0 @Width @Height">

  <!-- ===== 時間ヘッダ ===== -->
  @for (int h = StartHour; h <= EndHour; h++)
  {
    var cx = LabelWidth + ((h - StartHour) * 60 / StepMin + ColPerHour / 2f) * CellW;
    <g>
      <text x="@cx" y="@(RowH / 2)" class="time" dominant-baseline="middle" text-anchor="middle">@h</text>
    </g>
  }

  <!-- ===== 機器行 ===== -->
  @foreach (var (machine, idx) in Machines.Select((m, i) => (m, i)))
  {
    var yTop = RowH + idx * RowH;

    <g>
      <text x="@(LabelWidth - 5)" y="@(yTop + RowH / 2)" class="label">@machine.Name</text>
    </g>

    @foreach (var seg in machine.Segments)
    {
      var x = LabelWidth + TimeToCol(seg.Start) * CellW;
      var w = (TimeToCol(seg.End) - TimeToCol(seg.Start)) * CellW;
      <rect x="@x" y="@yTop" width="@w" height="@RowH" class="@seg.StatusCss" />
    }

    var fCol = TimeToCol(Now);
    if (fCol < Cols)
    {
      var fx = LabelWidth + fCol * CellW;
      var fw = (Cols - fCol) * CellW;
      <rect x="@fx" y="@yTop" width="@fw" height="@RowH" class="future" />
    }
  }

  <!-- ===== 細グリッド (10 分) – ヘッダ除外 ===== -->
  @for (int c = 0; c < Cols; c++)
  {
    var x = LabelWidth + c * CellW;
    <line x1="@x" y1="@RowH" x2="@x" y2="@Height" class="g-thin" />
  }
  @for (int r = 1; r <= Machines.Count + 1; r++)
  {
    var y = r * RowH;
    <line x1="0" y1="@y" x2="@Width" y2="@y" class="g-thin" />
  }
  
  <!-- ===== 太グリッド (1 時間) & 外枠 ===== -->
  @for (int h = 0; h <= EndHour - StartHour; h++)
  {
    var x = LabelWidth + h * ColPerHour * CellW;
    <line x1="@x" y1="0" x2="@x" y2="@RowH" class="g-thin" />
  }

  <!-- 外枠 -->
  <line x1="0" y1="0" x2="@Width" y2="0" class="g-hour" />
  <line x1="0" y1="@Height" x2="@Width" y2="@Height" class="g-hour" />
  <line x1="0" y1="0" x2="0" y2="@Height" class="g-hour" />
  <line x1="@Width" y1="0" x2="@Width" y2="@Height" class="g-hour" />

</svg>

<style>
  .normal {
    fill: #b6e7be;
  }

  .warning {
    fill: #ffe84f;
  }

  .alert {
    fill: #ff3b2f;
  }

  .future {
    fill: #ffffff;
  }

  .g-thin {
    stroke: #8c8c8c;
    stroke-width: 0.5;
  }

  .g-hour {
    stroke: #8c8c8c;
    stroke-width: 1.5;
  }

  .label {
    text-anchor: end;
    dominant-baseline: middle;
    font-size: 12px;
  }

  .time {
    text-anchor: middle;
    font-size: 12px;
    font-weight: bold;
  }
</style>

@code {
  /* ===== パラメータ ===== */
  [Parameter] public int StartHour { get; set; } = 9;
  [Parameter] public int EndHour { get; set; } = 18;
  [Parameter] public int StepMin { get; set; } = 10;
  [Parameter] public TimeSpan Now { get; set; } = DateTime.Now.TimeOfDay;
  [Parameter] public IReadOnlyList<MachineRow> Machines { get; set; } = SampleData();

  /* ===== 定数・計算プロパティ ===== */
  static readonly int CellW = 24;
  static readonly int RowH = 26;
  static readonly int LabelWidth = 70;

  int ColPerHour => 60 / StepMin;
  int Cols => (EndHour - StartHour) * ColPerHour;
  int Width => LabelWidth + Cols * CellW;
  int Height => RowH * (Machines.Count + 1);

  /* ===== ヘルパ ===== */
  int TimeToCol(TimeSpan t)
      => (int)((t - TimeSpan.FromHours(StartHour)).TotalMinutes / StepMin);

  /* ===== モデル ===== */
  public record Segment(TimeSpan Start, TimeSpan End, string StatusCss);
  public record MachineRow(string Name, List<Segment> Segments);

  /* ===== サンプル ===== */
  static List<MachineRow> SampleData()
  {
    TimeSpan T(string s) => TimeSpan.ParseExact(s, @"hh\:mm", null);

    return new()
        {
            new("機器1", new()
            {
                new(T("09:00"), T("12:30"), "normal"),
                new(T("12:30"), T("12:40"), "warning"),
                new(T("12:40"), T("14:30"), "normal"),
                new(T("14:30"), T("15:00"), "alert"),
                new(T("15:00"), T("16:30"), "normal"),
            }),
            new("機器2", new()
            {
                new(T("09:00"), T("11:00"), "normal"),
                new(T("11:00"), T("12:00"), "alert"),
                new(T("12:00"), T("12:30"), "warning"),
                new(T("12:30"), T("16:30"), "normal"),
            }),
            new("機器3", new()),
            new("機器4", new()),
            new("機器5", new()),
        };
  }
}
